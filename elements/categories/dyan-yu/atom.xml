<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: D言語 | alphakai.github.io]]></title>
  <link href="http://alphaKAI.github.io/elements/categories/dyan-yu/atom.xml" rel="self"/>
  <link href="http://alphaKAI.github.io/"/>
  <updated>2014-09-24T00:55:04+09:00</updated>
  <id>http://alphaKAI.github.io/</id>
  <author>
    <name><![CDATA[alphaKAI]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[02-FirstProgramming-First]]></title>
    <link href="http://alphaKAI.github.io/elements/2014/09/24/02-firstprogramming-first/"/>
    <updated>2014-09-24T00:20:18+09:00</updated>
    <id>http://alphaKAI.github.io/elements/2014/09/24/02-firstprogramming-first</id>
    <content type="html"><![CDATA[<p>どうも、あるふぁかいさんによるプログラミング講座02です<br/>
前回の記事<br/>
<a href="http://alphakai.github.io/elements/2014/09/23/01-intro-aboutprogramming/">http://alphakai.github.io/elements/2014/09/23/01-intro-aboutprogramming/</a>の続きです</p>

<p>今回は、D言語のコンパイラを導入してプログラミングに触れてみようって言う感じの内容です<br/>
あ、あとそれから<br/>
リクエスト的なのがあったと思うのでプログラミング言語の選び方的なものも併せて書いていこうかなあなんて思っています<br/>
あと、いまさらですが本講座ではWindows、もしくはLinux,OSX,Unix,BSDな*nix(総称させてください許してください)OSがインストールされているパソコンが必要です！<br/>
あと、書いててめっちゃ長くなってしまったので前編と後編って感じで2回にわけます<br/>
今回はその前編です</p>

<p>では、続きからどうぞ</p>

<!--more-->


<p>
さて、早速行きましょうか<br/>
ちょっと長いですけどがんばりましょう！！！</p>

<h3>さて！世界を作るための重機を仕入れよう！</h3>

<p>まず、D言語のコンパイラを導入しましょう<br/>
まあ、要するにこれから世界を作っていくわけなんですけど<br/>
そのための重機を仕入れようってかんじですね はい</p>

<p>D言語は静的型付けな言語ですのでコンパイラが必要なんですよね<br/>
あ、静的型付け/動的型付けについてはWikipediaなどで調べてください！</p>

<p>で、D言語のコンパイラの導入方法を細かくは説明しません<br/>
というのも、その説明は本質的なものではないので</p>

<p>とりあえず、簡単に説明します<br/>
こちらがD言語の公式サイトです<br/>
<a href="http://dlang.org">dlang.org</a><br/>
はい、こちらからDMD(D言語の公式コンパイラです これを僕は推奨します)をインストールするわけですが<br/>
Windowsの方はインストーラーを使うと楽です<br/>
で、LinuxとかOSXとかBSDとか*nixな方達は多分リポジトリにパッケージがあると思うのでバージョン管理システムを用いてインストールすると楽です！(ArchLinuxにはパッケージがあります)</p>

<p>とりあえず、インストールが終わったら<br/>
Windowsなのであればコマンドプロンプト<br/>
*nixな方はお使いのターミナルエミュレータを起動して<br/>
dmdと打ってみましょう<br/>
なんかぞろぞろ出てきたら成功です</p>

<p>あ！あと、エディタが必要ですね<br/>
Windowsな方はメモ帳だと辛いと思うのでなにかプログラミングに適したエディタを用意しましょう<br/>
僕のおすすめはNotepad++です<br/>
あ、Sublime Text 2ってのもありますけど<br/>
*nixな方はVimとかEmacsとかすきなものをお使いください<br/>
まあ、どんな環境であれ、D言語はかけるのでお好きな環境でどうぞ</p>

<p>これで世界を作るための重機、コンパイラの導入が出来ました<br/>
あ、わからないこととかがあったらコメントとかTwitterで言ってくれれば説明します(答えられる範囲で)</p>

<h3>初めてのプログラミング</h3>

<p>えーっと、とりあえず前回も言いましたが<br/>
PCは0,1しかわからないけど人間には0,1は辛いのでプログラミング言語を使うことになります<br/>
で、ここではD言語を使います</p>

<p>とりあえず!<br/>
何もしないプログラムってのをやってみましょうか<br/>
下の色が変わってる部分がプログラムの部分です！<br/>
<code>d
void main(){}
</code></p>

<p>これをさっき用意したエディタでmyFirstProgram.dというファイル名で保存しましょう(わかれば他の名前でも良い ただし拡張子として.dをつけること)<br/>
そして、コマンドプロンプトなりターミナルエミュレータを起動(いちいち2つとも書くと面倒なのでここではシェルと呼ばせてくださいおねがいします・・・)して<br/>
そのファイルを保存したディレクトリまで移動してから<br/>
 dmd myFirstProgram.d<br/>
と入力し、エンターを押しましょう<br/>
これでコンパイルが行われます</p>

<p>そうすると<br/>
コンパイルが始まってしばらくすると終わってシェルが入力待ちの状態になると思います<br/>
あ、エラーがあるとエラーメッセージが出るのですが、今回のプログラムはエラーが出ないはずですので(多分)何もなく終了すると思います</p>

<p>次に<br/>
Windowsな方は<br/>
myFirstProgram.exe<br/>
*nixな方は<br/>
./dmd myFirstProgram<br/>
と入力しましょう<br/>
そうすると実行されます！<br/>
まあ、そうすると何もなかったようにシェルが元の状態に戻ります<br/>
まあ、当然ですよね何もしないプログラムなんですから(笑)</p>

<p>これが一番最初のあなたのプログラムです！と言われてもピンと来ないと思うので次はもうちょっとだけ書き進めてみましょうか</p>

<p>とりあえず、ハローワールドと言う プログラミング言語に対する挨拶的なものがあるのですが<br/>
それをやってみることにしましょう<br/>
このコードに関する解説はちょっとしたらします<br/>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='d'><span class='line'><span class="k">import</span> <span class="n">std</span><span class="p">.</span><span class="n">stdio</span><span class="p">;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="kt">void</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">writeln</span><span class="p">(&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Hello</span> <span class="n">world</span><span class="p">!&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
これをさっき用意したエディタでhelloworld.dというファイル名で保存し先ほどと同様にコンパイルして実行してみましょう！<br/>
Windowsな方は<br/>
helloworld.exe<br/>
*nixな方は<br/>
./helloworld<br/>
です！<br/>
そうすると画面に<br/>
Hello world!と出力されると思います！<br/>
やったぜ！</p>

<p>これがハローワールドです！<br/>
プログラミングの世界にこんにちは的な感じです</p>

<p>ここであるふぁかいさんのワンポイントアドバイス！<br/>
こんな感じでソースコードが貼ってあって一回写したりコピペしたりしたら<br/>
そのプログラムを色々といじってみましょう</p>

<p>あ、ソースコードという単語について説明しますね<br/>
コードっていうのは規則とか規定という意味なんですよ<br/>
で、プログラムはそのプログラミング言語の規則にしたがって記述するわけじゃないですか<br/>
だから、コード = プログラムと言えるわけですよ<br/>
それから、ソースというのは源とかそういう意味じゃないですか<br/>
その源ってのは最終的に0,1となるプログラムの実態からしたら人間が書いたコードは変換する元となるわけじゃないですか<br/>
だからソースコードというと、実際にその言語で書かれたコードを指すんです！<br/>
なんかわかりにくくなってしましましたね・・・<br/>
まあこんな感じで・・・<br/>
うまく説明出来た気がしないのでわからなかったら調べてください・・・・</p>

<p>例えばwritelnの行を増やしたり&#8221;&ldquo;の中身を変えたりしてみましょう<br/>
これが後々役にやってきたりすると思います(個人的にはこれがプログラミングおもしれえ！につながると思っています)</p>

<h3>それじゃあ解説と行きましょうか</h3>

<p>まず、最初の何もしないプログラムについて</p>

<p>一個一個の意味を書いていくと<br/>
とりあえず、<br/>
<code>d
void main(){}
</code>
とあるのですがこれは何をしているかというと<br/>
void型のmainという関数を宣言というか定義しているんですよね<br/>
で、まあ、voidってなにmainってなにつか関数って何ってなるので一個一個説明します<br/>
まず、void型のmainという関数について<br/>
最初に書いたvoid型ってのなんですけど<br/>
まずは型というものの説明をします</p>

<p>前回も言いましたけどプログラムは0,1の羅列でありそれはプログラミング言語を変換したものです<br/>
で、型っていうのはある値がどんなものかを表すためのものです<br/>
例えばその値が整数なのか小数なのかはたまた文字なきゅうけいがのかを識別するものです<br/>
つまり、その&#8221;値&#8221;がどんなものなのかがコンパイラ側からわかるとちゃんとした0,1の羅列に変換できるんですよ<br/>
だってあれじゃないですか、自分は小数だと思ってもコンパイラが整数だと解釈したら色々と問題あるじゃないですか？だから自分で型を指定してやる必要があるんですよ(基本的には)<br/>
で、その&#8221;値&#8221;について説明しようと思います<br/>
さっきから&#8221;値&#8221;って言っていますが<br/>
それは変数の値という意味です<br/>
はい！ここでまた出てきました<br/>
進出単語！！！<br/>
&ldquo;変数&rdquo;<br/>
まあ、これは多分わかると思うんですけど<br/>
数学で<br/>
f(x) = 2x<sup>2</sup> + 3x - 4<br/>
みたいな二次関数があったとしたらそのxのことです(二次関数とか数学における関数については自分で勉強してください ちなみに一次関数でも何でもいいんですけどね(笑))<br/>
ほら、x = 1, x = 2みたいな感じで代入するのってプログラミングと同じようなことをしているんですよ<br/>
つまり、プログラミングと数学は似てると思ってもらっても問題ないと思います</p>

<p>つまり、型っていうのはある変数があったときその変数がどんなものなのかを表すものです</p>

<p>で、ここで振り返るとさっき<br/>
戻り値の説明をしていました<br/>
戻り値ってのは関数の結果です<br/>
つまり<br/>
f(x) = 2x<sup>2</sup> + 3x - 4<br/>
と合った時にx = 1だとf(1) = 1じゃないですか<br/>
この1が戻り値になるわけです<br/>
で、1は整数なので整数型と言えるわけです</p>

<p>ここで型の種類と意味をかいつまんで説明しましょう(ほとんど)<br/>
int 整数型<br/>
void 何もないことを表す型 おもに戻り値でつかう(というか値を持てないので戻り値にしか使えない)<br/>
string 文字列型<br/>
char 文字型<br/>
double 小数型(floatも小数ですがdoubleのほうがいいと思います このへんはご自分で調べてください)<br/>
みたいな感じです</p>

<p>あ〜文字と文字列の説明が抜けてましたので説明します<br/>
文字はその名の通り1文字です<br/>
つまり &lsquo;A&rsquo;, &lsquo;B&#8217;とかで、いっぽう文字列は&#8221;ABC&#8221;みたいな感じの複数の文字の組み合わさったものです<br/>
ここで&#8221;を文字列に、&#8217;を文字に使わったわけですが何を意味しているかというと<br/>
それが文字リテラルなのか整数リテラルなのかを表しています<br/>
あー、リテラルの説明をします<br/>
超ざっくり言うと 定数のことです 定数ってのはつまり　1とか2とか&#8221;ABC&#8221;とか&#8217;A&#8217;とかのことです<br/>
値が整数型なら整数リテラルとか言ったりします はい</p>

<p>void型を除いてそれぞれの型は値を持つことができます<br/>
そして、それを利用することが出来るんですよね(利用シーンとかは後でやります)</p>

<p>ここまでで<br/>
変数, 型, 戻り値, の定義的なものを書きました<br/>
多分わかりにくいところがあると思うのでそのへん、コメントかTwitterで教えてください追記します</p>

<p>で、次にmain関数と関数について説明します<br/>
まずは関数から<br/>
さっきも説明しましたけど<br/>
基本的には数学の関数と同じで値を渡す(f(x)ならx = 任意の数として呼び出すこと(呼び出しについては後述))と処理(数学だと計算)をして結果を出すものです<br/>
->何が違うか<br/>
単純な数式じゃなくて処理を織り交ぜることが出来るんですよね<br/>
つまり、関数はざっくり言うと処理のブロックと言えるんですよ<br/>
幾つかの処理をすることで得られる結果を得るためのブロックてな感じです</p>

<p>とりあえず、関数の宣言を模式的に記述すると<br/>
返り値の型 変数の名前(引数の型 引数の名前){<br/>
  ここに処理を書く<br/>
}<br/>
みたいな感じです</p>

<p>で、引数とはf(x)のxの部分のことです<br/>
引数は必ずしも必要ってわけじゃないので引数がいらない時は空の括弧でいいんです<br/>
で、複数必要なときは引数のところにカンマ区切りで 引数の型と引数の名前を書いていきます</p>

<p>はぁ、疲れましたね<br/>
このへんで一旦休憩しましょう<br/>
まあ、休憩なんていらないぜ！って方はこのまま突っ走りましょう！</p>

<p>やっとmain関数の話ができます</p>

<p>main関数って何よって話しなんですけど<br/>
かっこ良く言うと<br/>
始まりの関数 意味がわかるように言うと<br/>
処理の開始地点です<br/>
プログラムが実行されると一番最初にmain関数が呼ばれます<br/>
ん〜っと、難しいですね<br/>
main関数 -> 他の関数読んだりして処理する<br/>
みたいな感じなんですよ<br/>
まあ、多分よくわからないと思いますがとりあえず、プログラムはmain関数から始まるんだ！って思っておいてください(一部例外はありますが)</p>

<p>ここまででやっとmain関数の説明が出来ました！<br/>
それから最初の何もしないプログラムの説明が出来ました！<br/>
やったぜ!!<br/>
ただ、あまりにも長くなってしまったので<br/>
ハローワールドの話は後編ですることにします！</p>

<p>とりあえず、この記事を公開してからすぐに後編を書くのでよろしくお願いします！</p>

<p>では、以上です</p>

<p>alphaKAI</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[01-Intro-AboutProgramming]]></title>
    <link href="http://alphaKAI.github.io/elements/2014/09/23/01-intro-aboutprogramming/"/>
    <updated>2014-09-23T23:51:05+09:00</updated>
    <id>http://alphaKAI.github.io/elements/2014/09/23/01-intro-aboutprogramming</id>
    <content type="html"><![CDATA[<p>えーっと、とりあえずなんとなく<br/>
プログラミングを独学しようとする初心者の方に少しでも貢献できればなあ<br/>
なんて思って、僕なりにプログラミング講座的なものをしてみようと思ってはじめてみました<br/>
今回は、まずプログラミングとはなにか ということをかこうかなあと<br/>
まあ、プログラミングに興味を持ってる方が対象なので書く必要があんまりない(?)かもしれないですけど<br/>
とりあえずここから</p>

<p>次回へのリンクを貼っておきます</p>

<p>では、続きからどうぞ</p>

<!--more-->


<p>えーっと、本講座における注意点</p>

<ul>
<li>この講座では基本的にD言語(たまにRubyも使うかも)で解説します</li>
<li>しかし、この講座では主にプログラミングの概念的な汎用的な考えを書いていく予定です</li>
<li>したがって、言語機能を深くまで掘り下げたりとかはしませんのでDやRubyの知識が無い方でも大丈夫です</li>
<li>必要なのはやる気だけです！！！</li>
<li>あ、ちなみに、これは僕なりの考え方なので他の人からすると考え方が異なるかもしれません</li>
</ul>


<p>以上の点が注意点的な感じです<br/>
はい</p>

<p>では、早速はじめましょう</p>

<h3>そもそもプログラミングとはなにか</h3>

<p>簡単に言えば<br/>
自分で世界を作ること<br/>
みたいな感じなんですよ<br/>
スケールが大きい話ですけど</p>

<p>で、つまりは<br/>
コンピュータを使って自分のやりたいことを実現するための手段です<br/>
あー、実現するための手段という点を見ると<br/>
「そんなん、既にあるソフト使えばええやん」<br/>
まあ、実際そうなんですけど<br/>
ただ、それだと<br/>
痒いところに手が届かなかったり<br/>
難解な説明書を読みながら頑張って作業したりとか<br/>
最悪の場合、自分のやりたいことができなかったりします</p>

<p>でも、自分で作っちゃえば解決します！</p>

<p>無いなら作ればいい<br/>
あるけど、使いにくいから自分で作っちゃおう</p>

<p>これがプログラミングにおいて基本的な考え方だと思います</p>

<p>つまりは、自分で物を作るんです</p>

<p>自分がやりたいことを自分の力で実現出来る<br/>
なんて素晴らしいことでしょう<br/>
それに、その自分が作ったもので他の人が同じようなことが出来るようになるかもしれません<br/>
なんて素晴らしいことでしょう！！！</p>

<p>話がごちゃごちゃしてきたのでまとめると</p>

<p>プログラミングとは<br/>
自分がやりたいことをコンピュータを使って実現するための手段<br/>
です</p>

<h3>じゃあまず何をすればいいか</h3>

<p>簡単です<br/>
実際に手を動かしましょう<br/>
これが(多分)技術力がつくコツ的なものだと思います<br/>
というか、実際に経験を積まないと多分ダメです はい</p>

<p>じゃあまずどうすんのってことなので説明します</p>

<p>多分いろんな入門書に書いてあると思いますが</p>

<p>PCそのもの(CPU)は言葉っていうものを理解できません<br/>
さらには、数字さえ理解できません<br/>
じゃあどうなってるのか</p>

<p>はい、CPUは電気信号のON/OFFしかわかんないんですよ<br/>
+,-の組み合わせにしたがって処理する感じなんですよ</p>

<p>で、+,-を2進数(0と1だけ)で表したものがプログラムの実態なんですよ</p>

<p>でも、常識的に考えて0,1の羅列を人間が書くのは絶望的です<br/>
例えば100桁書くぐらいなら何とかなるかもしれないけど<br/>
それが1万桁とかそんな感じの膨大な数になったら不可能ですね<br/>
死んでしまします</p>

<p>だからどうするか<br/>
-&gt; プログラミング言語と言うものを使う</p>

<p>こういうわけなんですよ<br/>
で、こういう訳って言われても意味がわからないと思うので説明すると<br/>
プログラミング言語ってのは0,1の羅列は人間にはわかりにくすぎるので<br/>
人間がわかるように処理を記述するための言語って感じです<br/>
  つまり<br/>
010100010101010110101010(適当です)<br/>
  ってのと<br/>
1 + 1(さっきの0,1の羅列とは対応してませんが)<br/>
とでは、圧倒的に後者のほうがわかりやすいじゃないですか<br/>
そういうことなんですよ</p>

<p>でも！<br/>
ここで一つ問題が<br/>
人間は0,1の羅列が辛いけど
PCからしてみると0,1しかわからないっていう現象が発生するんですよ<br/>
だからどうするか<br/>
プログラミング言語で書かれたものを0,1の羅列に変換してやればいいんですよ<br/>
それもプログラムを使って</p>

<p>これが、コンパイラと言うものです(compiler)<br/>
  コンパイル(compile)がその変換することを指すのでコンパイラはコンパイルするソフトってことです</p>

<p>簡単な図にすると
1 + 1 -&gt; コンパイラ -&gt; 010100010101010110101010(適当です)<br/>
みたいな感じですね</p>

<p>ということなので<br/>
あんまり長くなるとアレなので<br/>
今回はここまで</p>

<p>次回はD言語のコンパイラを導入して実際にプログラミング言語に触れてみようと思います！<br/>
次回の予定は未定ですが多分この記事を書いてから数日以内には公開できるかなあと思います！(もしかしたらその日のうちに書くかも)</p>

<p>では、以上です</p>

<p>alphaKAI</p>
]]></content>
  </entry>
  
</feed>
