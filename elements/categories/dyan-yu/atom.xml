<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: D言語 | alphakai.github.io]]></title>
  <link href="http://alphaKAI.github.io/elements/categories/dyan-yu/atom.xml" rel="self"/>
  <link href="http://alphaKAI.github.io/"/>
  <updated>2014-10-13T15:52:16+09:00</updated>
  <id>http://alphaKAI.github.io/</id>
  <author>
    <name><![CDATA[alphaKAI]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[初心者向けプログラミング講座 - 04 : 制御構文と配列 前編]]></title>
    <link href="http://alphaKAI.github.io/elements/2014/10/13/04-firstuseifandloop-first/"/>
    <updated>2014-10-13T15:37:23+09:00</updated>
    <id>http://alphaKAI.github.io/elements/2014/10/13/04-firstuseifandloop-first</id>
    <content type="html"><![CDATA[<p>はい、初心者向けプログラムング講座04(前編)です!<br/>
α改が多忙で更新ができてなくて非情に申し訳ないです・・・<br/>
今回は、制御構文を触ってみようと思います!<br/>
それと、配列という便利なデータ型についても説明しようと思います<br/>
ただ、長くなったので今回も前編後編をわけます!</p>

<p>過去記事のリンクを貼っておきます<br/>
01  <a href="http://alphakai.github.io/elements/2014/09/23/01-intro-aboutprogramming/">初心者向けプログラミング講座 – 01 : Introduction そもそもプログラミングとは</a><br/>
02(前編)  <a href="http://alphakai.github.io/elements/2014/09/24/02-firstprogramming-first/">初心者向けプログラミング講座 – 02 : 初めてのプログラミング 前編</a><br/>
02(後編)  <a href="http://alphakai.github.io/elements/2014/10/12/02-firstprogramming-second/">初心者向けプログラミング講座 – 02 : 初めてのプログラミング 後編</a><br/>
03  <a href="http://alphakai.github.io/elements/2014/10/13/03-firstuseval/">初心者向けプログラミング講座 – 03 : 変数を用いたプログラミング</a></p>

<p>では、続きからどうぞ</p>

<!--more-->


<p>ふー、この講座も4回目ですね<br/>
自分が前に書いた記事を見返すといろいろと抜けていたり説明が微妙なところがあるので<br/>
ちまちま修正したりしています<br/>
ですので、ふと何か疑問に思うことがあったら過去記事を見返してもらえると<br/>
その部分が追記されているかもしれないです</p>

<p>今回も結構長いですががんばりましょう!<br/>
では、早速行きましょう!</p>

<h3>ifとforとそれからwhile</h3>

<p>まず、条件分岐から行きましょうか<br/>
前回の記事の最後で可読性について触れましたよね<br/>
で、その時に僕が掲載したソースコードにifという一見関数のようなものがありましたよね<br/>
それについて説明しようと思います</p>

<p>まず簡単なサンプルを書いてみます</p>

<pre><code class="d">import std.stdio;

void main(){
  int x = 3;

  //xが3であるかどうかを比較
  if(x == 3){
    //xが3の時
    writeln("xは3です");
  } else {//条件に合わない時
    writeln("xは3ではありません");
  }
}
</code></pre>

<p>えーっと、このプログラムををコンパイルして実行してみてください<br/>
あ!結構重要っていうかまあ、便利なことを説明し忘れていました!!!<br/>
このプログラムを普通にdmdでコンパイルしてもいいのですが、rdmdという便利なプログラムがあるんですよ!<br/>
紹介するのを忘れていました</p>

<p>たぶんdmdをインストールした時に同時にインストールされていると思います<br/>
なので、次のコマンドで行けると思います</p>

<pre><code class="bash"> $ rdmd fileName.d
</code></pre>

<p><code>fileName.d</code>のところは適宜読み替えてください<br/>
もしもrdmdが見当たらない場合は・・・頑張ってください!((</p>

<p>コンパイルして実行してみてください。</p>

<p>実行すると、<br/>
xは3です<br/>
という出力が得られると思います</p>

<p>解説行きます!</p>

<p>まず、int型のxを3で初期化<br/>
xが3であるのかを比較演算子の一つである等価演算子( == )で比較<br/>
比較した結果がbool型のtrueかfalseで返ってくるので<br/>
trueのときはifのブロックが処理される、またfalseの時はelseのブロックが処理される<br/>
if, else 両方が実行されることはない</p>

<p>比較演算子について説明しますね<br/>
XとYが等しいかどうか   : X == Y<br/>
XがYより大きいかどうか : X > Y<br/>
YがXより小さいかどうか : Y &lt; X<br/>
あ、YがXより小さいってのは数学的に見てもXがYより大きいってことですけどまあ<br/>
不等号両方共(大なり/小なり)使えるよっていう意味で書いたので気にしないでください<br/>
XがY以上かどうか       : X >= Y<br/>
XがY以下かどうか       : X &lt;= Y</p>

<p>という感じです<br/>
あ、bool型の説明をしますね</p>

<p>bool型というのは真偽値のことです<br/>
取れる値はtrue, falseの2つです<br/>
ちなみに、if文は非ゼロ値であれば真になります<br/>
ゼロ値とはnull，false，数値型の0，まだ割り当てられていない動的配列のこととかです(詳しくはまた今度)</p>

<p>今はifとelseを使いましたがもうひとつif文の愉快な仲間がいます<br/>
else ifくんです</p>

<p>とりあえずサンプルコード行きましょうか<br/>
ちなみに、今は定数を比較しているので結果は明示的ですが<br/>
記事の後半では配列と乱数を用いてランダムに取り出される結果を比較してみたりしますのでお楽しみに(?)</p>

<pre><code class="d">import std.stdio;

void main(){
  int x = 3;

  if(x == 1){
    writeln("x = 1");
  } else if (x == 2){
    writeln("x = 2");
  } else if (x == 3){
    writeln("x = 3");
  } else {
    writeln("out of range");
  }
}
</code></pre>

<p>えーっとelse ifって何って感じですけどコード見ると<br/>
なんとなくわかるかなあと思います<br/>
else if = else + if<br/>
(そのまんま)です<br/>
つまり、最初のifのところの式が偽だった場合、elseが実行される前にelse ifが実行されます<br/>
また、else if は複数書くことができますが<br/>
実行されるブロックは一つですし、比較される順番は上からです<br/>
あと、今回は敢えて括弧をつけましたが部分的に抜き出すと次のようにも記述が可能です</p>

<pre><code class="d ">  if(x == 1)
    writeln("x = 1");
  else if (x == 2)
    writeln("x = 2");
  else if (x == 3)
    writeln("x = 3");
  else
    writeln("out of range");
</code></pre>

<p>ブロックの内部が1文だけであればこちらのほうが見通しがいいかもしれないですね<br/>
ただ、括弧の省略は人によって意見が異なるのでお好きなスタイルでどうぞ<br/>
ちなみに、あるふぁかいさんは1文だけのブロックでは括弧を省略します<br/>
以前は括弧も書いていたのですが最近は基本的には省略します(OSSに手を加える場合はそのOSSのコーディング規則に従いますが)<br/>
あ、OSSはOpen Source Softwareの略です</p>

<p>最後に模式的に書いておきましょうか<br/>
if(式){<br/>
  式が真の時の処理<br/>
} else if (式){<br/>
  最初の式が偽でありこの式が真の時に実行される<br/>
} else {<br/>
  どの(else)ifも偽の時に実行される<br/>
}</p>

<p>まーとりあえずifの紹介はこんなもんでしょうか</p>

<p>次はforですか・・・<br/>
タイトルに嘘をつくことになりますが<br/>
forじゃなくてforeachからやってきましょう<br/>
あ、これから紹介するforとかforeach, whileとかそのへんは全部ループ構文です<br/>
はい、繰り返しってやつですはい<br/>
とりあえずforでできることはほとんどforeachでできるので</p>

<p>サンプルコード行きます</p>

<pre><code class="d">import std.stdio;

void main(){
  foreach(i; 0..5)
    writeln(i);
}
</code></pre>

<p>これをコンパイル&amp;実行(rdmdで実行しても構いません)<br/>
してみると出力は<br/>
  0
  1
  2
  3
  4
と出力されます</p>

<p>解説しますね<br/>
foreachは0..5という範囲(range)から1つずつ取り出してiに代入してからそのブロックを実行します<br/>
後ほど説明しますがイメージ的には整数の配列っぽいものだと思ってください<br/>
まだ説明していない配列を説明に組み込むのは少々気が引けますが、我慢してください!<br/>
そのモヤモヤ、あとで解決しますので!<br/>
ここで、注意点としては0から始まりますが終わるのは4だということです<br/>
<code>[0, 1, 2, 3, 4]</code><br/>
という配列があったとしてそれを左から順々に取り出して行く感じです<br/>
フローチャートにすると</p>

<pre><code>foreach  
  -&gt; i = 0 -&gt; writeln i
  -&gt; i = 1 -&gt; writeln i
  -&gt; i = 2 -&gt; writeln i
  -&gt; i = 3 -&gt; writeln i
  -&gt; i = 4 -&gt; writeln i
</code></pre>

<p>みたいな感じです<br/>
つまりforeachを使わないで書くとこうなります</p>

<pre><code class="d">import std.stdio;

void main(){
  int i;

  i = 0;//Dでは初期化時に整数型であれば0が代入されますが、ここでは敢えて代入します
  writeln(i);
  i = 1;
  writeln(i);
  i = 2;
  writeln(i);
  i = 3;
  writeln(i);
  i = 4;
  writeln(i);
}
</code></pre>

<p>こうなります<br/>
めっちゃ行が増えた気がしますよね<br/>
それに、0->4じゃなくて2->6まで表示させたい時とかにいちいち書き換えるのは面倒ですよね<br/>
それに、コードが読みにくくなります<br/>
ループの強さがおわかりいただけたでしょうか<br/>
まあ、またあとで配列を説明してから再び説明しますね<br/>
ひとまず模式図を書いておきますと</p>

<p>foreach(とり出されたものが代入される変数; 範囲の最初..範囲の最後){<br/>
  ループさせたい処理<br/>
}</p>

<p>とりあえず、配列とか範囲(range)からひとつずつ取り出してブロックを実行してくれるイケてる奴だと思っておいてください<br/>
ちなみに、とり出されたものが代入される変数とかループ内で使われる変数はループ変数とか呼ばれます<br/>
で、そのループ変数は必ず使わないと行けないということではないので、単純に複数回繰り返したい時とかに有効です<br/>
たとえば &ldquo;I love you.&#8221;という文字列を5回表示したいときは</p>

<pre><code class="d">foreach(i; 0..5)
  writeln("I love you.");
</code></pre>

<p>これでできます!<br/>
これさえマスターすればラブレターも楽勝ですね!(どこがやねん感)</p>

<p>はい、次はforですね<br/>
forは少し複雑ですが乗り切りましょう<br/>
まず、サンプルコードです</p>

<pre><code class="d">import std.stdio;

void main(){
  int i;

  for(i = 0; i &lt; 5; i++)
    writeln(i);
}
</code></pre>

<p>これを実行すると、先ほどと同じ出力が得られると思います</p>

<p>解説しますと<br/>
まず、ループ用の変数iを宣言します<br/>
そして、forの最初に初期化式を書きますそして次にその処理を行う条件式を書き、最後に変数の値を変える式を書きます<br/>
えーっと・・・<br/>
一気に言われてもいみわからんのじゃハゲって話なので</p>

<pre><code>for
 -&gt; 初期化の節が実行される
  -&gt; ループ開始
    -&gt; 条件式を書き、この式が真になる時だけ以下のブロックが実行されます、つまり、ループが行われる条件式を記述します
      -&gt; 前述の条件式を満たしていた場合ブロックを処理
      -&gt; ブロックの処理が終わったと同時に最後に書いた変数の値を変える式が実行されます
</code></pre>

<p>処理はこのような流れになります</p>

<p>今回であればiの値を5回表示し、その内容は0から順に表示していくという感じですよね<br/>
だから最初にスタートの0でiを初期化します<br/>
次に、条件式がチェックされます 今回はi &lt; 5を満たしているかが判断されます まあ、ここにifが入ってるようなもんです<br/>
そしてブロックが実行された後に変数の値を変える処理が行われます 今回は1つずつ値を増やしたいのでiの値をインクリメントします<br/>
インクリメントの話は前にしたかもしれないですが、しますね<br/>
整数型の変数Xがあるとして<br/>
X++で<br/>
X = X + 1を意味します<br/>
また、X = X + 1はX += 1と書いても良いです<br/>
+=みたいなものを複合演算子といいます</p>

<p>話がそれますが複合演算子の話を少ししましょうか</p>

<p>ある演算子Xがあったとして(Xは +,-,*,/,%のどれかになります)、同時にある整数型の変数iがあった場合<br/>
i X= 3とあった場合、これを展開すると<br/>
i = i X 3となります<br/>
つまり、変数を用いた式の結果を元の変数に入れるって言う時に毎回その変数を右辺に書くとめんどくさいじゃないですか<br/>
だから、それを解決するためにあります<br/>
ここまでの説明で多分わかってもらえたと思いますのでひとまず複合演算子の話は終了とします</p>

<p>インクリメントの話に戻りましょう<br/>
インクリメントの代わりに値をひとつ減らすデクリメントと言うのがあります<br/>
ご想像の通り&ndash;です</p>

<p>ちなみに、インクリメント/デクリメントはそれぞれ2種類あります<br/>
前置インクリメント/デクリメントと後置インクリメント/デクリメント です</p>

<pre><code class="d">int i = 0;
i++;//これが後置
++i;//これが前置
i--;//同様に後置
--i;//これは前置
</code></pre>

<p>値を1増加/減少させるという意味は同じですが、増加/減少させるタイミングが異なります<br/>
後置のものは値を参照した後に増加/減少させ、前置は値を増加/減少させて参照されます</p>

<p>つまり</p>

<pre><code class="d">int i = 0;

writeln(i++);//ここでは0になる
writeln(i);//ここでは1

i = 0;
writeln(++i);//ここでも1
writeln(i);//これも1
</code></pre>

<p>こうなります!</p>

<p>で、ここまで来てやっとさっきのforのサンプルコードの解説が終わったかなあなんて思います<br/>
あ、ちなみに<br/>
forのとこの3つの式はどんなものでもいいです<br/>
語弊があると思うので説明すると、初期化式で初期化した変数を必ず条件式とか値の変化の式で使わないといけないというわけではありません<br/>
ループによってはその初期化式で初期化された値を別の値に処理してからそれを条件式に組み込みたい場合とかもあるので</p>

<p>とりあえず、さっきのでforの解説は終わりです<br/>
最後にI love you.のやつ書いておきますね</p>

<pre><code class="d">for(int i; i &lt; 5; i++)
  writeln("I love you.");
</code></pre>

<p>うーん、なんかかいてるあるふぁかいさんが疲れてきた・・・<br/>
一旦ここで休憩をはさみましょうか<br/>
ということなので今回も前編後編をわけます!<br/>
前編をアップ後すぐに後編をアップしたいと思います!</p>

<p>では、以上です</p>

<p>alphaKAI</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初心者向けプログラミング講座 – 03 : 変数を用いたプログラミング]]></title>
    <link href="http://alphaKAI.github.io/elements/2014/10/13/03-firstuseval/"/>
    <updated>2014-10-13T15:06:34+09:00</updated>
    <id>http://alphaKAI.github.io/elements/2014/10/13/03-firstuseval</id>
    <content type="html"><![CDATA[<p>どーも、あるふぁかいさんによる初心者向けプログラミング講座03です！<br/>
今回は変数を使ったプログラミングをしていこうと思います</p>

<p>過去記事<br/>
01はこちらです<br/>
<a href="http://alphakai.github.io/elements/2014/09/23/01-intro-aboutprogramming/">初心者向けプログラミング講座 – 01 : Introduction そもそもプログラミングとは</a><br/>
02(前編)はこちらです<br/>
<a href="http://alphakai.github.io/elements/2014/09/24/02-firstprogramming-first/">初心者向けプログラミング講座 – 02 : 初めてのプログラミング 前編</a><br/>
02(後編)はこちらです<br/>
<a href="http://alphakai.github.io/elements/2014/10/12/02-firstprogramming-second/">初心者向けプログラミング講座 – 02 : 初めてのプログラミング 後編</a></p>

<p>では、続きからどうぞ</p>

<!--more-->


<p>はい、これ書いてる時に時計をみたら丁度午前2時だったんですよね<br/>
そしたら、星が見たくなってきました(頭の中で天体観測が再生されてる系の)<br/>
そんなはなしは置いといて今回もはりきっていきましょー！</p>

<h3>変数を用いたプログラミング</h3>

<p>じゃあまず早速D言語によるソースコードを書きます<br/>
プログラミングで一番大事なことは実際に手を動かすことだと思うので！</p>

<pre><code class="d">import std.stdio;

void main(){
  int x;
  x = 2;// x に 2を代入
  writeln(x);
}
</code></pre>

<p>はい。前回までのことを踏まえて考えるとこれが何をしているかわかるかなあと思います</p>

<p>とりあえずこれを実行してみると多分<br/>
2<br/>
とコンソールに出力されると思います</p>

<p>では、解説をします</p>

<p>まずまあ、1行目でstd.stdioをimportしてますよね<br/>
まあ、これは変数の中身を表示するためにwritelnを使いたいので使っています</p>

<p>あー、writelnについて補足しておきますね<br/>
writelnはwriteという関数があるんですけど、writeはただ文字をwriteするだけの関数で、lnは改行を表しています<br/>
前回writelnは改行を末尾ですると言ったのはそういうことです write + ln = writeln的な感じです<br/>
で、その改行についてなのですが<br/>
前も言ったけど結局プログラムは全部0,1になるんですよ<br/>
で、その時に文字の改行も0,1で表さないといけないんですよね
だから、改行っていうのを明示的に示す必要があります<br/>
じゃあどうやんのって話なんですけど<br/>
簡単です エスケープシーケンスというものを使います
エスケープシーケンスについてざっくり言うと<br/>
普通は表せない文字とか機能を規定された特別な文字の並びにより表したものです<br/>
ん〜、わかりにくいかもしれないのですがまあ基本的に バックスラッシュ + 文字って思っておくといいかもしれません<br/>
とりあえずチョット書くと</p>

<ul>
<li>\n 改行を表すエスケープシーケンス</li>
<li>\t TAB文字を表すエスケープシーケンス<br/>
みたいな感じです</li>
</ul>


<p>つまり</p>

<pre><code class="d">writeln("Hello");
</code></pre>

<p>と</p>

<pre><code class="d">write("Hello\n");
</code></pre>

<p>は同義です はい</p>

<p>話がそれたので解説に戻りますね</p>

<p>で、まあ変数の表示に関してはこれでいいと思うのですが、肝心の変数についての説明ができてないので今からします</p>

<p>えーっと まず4行目でint型のxという変数を宣言しています<br/>
基本的に、D言語のような静的型付けの言語では変数を用いる場合は宣言が必要です<br/>
というのも、前述したとおりプログラムを0,1に変化する過程において宣言がないと様々な問題が発生するんですよ だからコンパイル時に弾いてる そんなかんじです(適当な説明になってしまいました・・・)<br/>
で5行目でxに2を代入しています</p>

<p>はい、ここで代入について説明しますね</p>

<p>えーっと、数学では=は両辺が等しいことを示しますが プログラミングにおいては代入を意味します<br/>
左辺に右辺を代入する感じです<br/>
模式的に書くと<br/>
代入される変数 = 代入する値;<br/>
という感じです<br/>
で、ここで値と書きましたが<br/>
べつに値の部分は定数じゃなくてもいいんです<br/>
変数でも構いません<br/>
変数を書いた場合、変数の値が参照されてそれが代入されます<br/>
つまり、x,yという2つのint型の変数があったとして</p>

<pre><code class="d  ">x = 2;
y = x;
</code></pre>

<p>とした場合、yにxのもつ2が代入されます</p>

<p>ちなみに、数学における等価を表す=とプログラミングに於ける等価を表す演算子は==です<br/>
==は等価演算子といいます<br/>
比較演算子の一つです<br/>
それに関しては、条件分岐を説明する回で解説するので頭の片隅においておいてください<br/>
あ、演算子という新出単語がでましたね</p>

<p>演算子とは演算を表す各種の記号のことです<br/>
つまり、加算を表す演算子は<code>+</code>ですし、減算を表す演算子は<code>-</code><br/>
同様に乗算は<code>*</code>で除算は<code>/</code>です<br/>
除算がちょっと変わっていますね まあでもそういうもんだと思ってください<br/>
それから剰余を表すのが%です<br/>
2 = 8 % 6<br/>
という感じになります</p>

<p>まだまだ演算子はありますが、とりあえず今は必要ないので<br/>
また次の回で必要になった時に逐次説明しようと思います</p>

<p>で、代入演算子(=)をつかってxに2を代入しています<br/>
ちなみにD言語では変数の宣言時に自動的に初期値(型によって異なる)で初期化されます<br/>
intの場合は0がstringなら&#8221;&ldquo;(空)が代入されます<br/>
でも、その初期値を自分で宣言時に設定できます<br/>
どうするかというと実に簡単で</p>

<pre><code class="d">int x = 2;
</code></pre>

<p>これでxには2が代入されます<br/>
ちなみに、intの挙動が変わるとか言うことはないので次の行で<code>int y;</code>と宣言したところでyは0で初期化されます</p>

<p>ソースコードもう一回見ると、ここで一つ疑問に思うと思うのですが<br/>
// x に 2を代入<br/>
っていうのが書いてありますよね<br/>
この//について説明しようと思います<br/>
長くなったので、セクションを一回切りましょう</p>

<h3>コメントアウトについて</h3>

<p>はい。<br/>
コメントアウトって何よってなるので説明しますと<br/>
コメントとは、ソースコードにおけるメモ書きです<br/>
でも、そのコメントをコンパイラが解釈しようとすると事故るので<br/>
コメントをコンパイラが解釈しないように、つまり、無視するようにすることをコメントアウトといいます<br/>
で、そのコメントアウトするために//というスラッシュ2つの記号を使います<br/>
まあ、//以外にも様々なコメントアウトの記号があるので説明しますね<br/>
とりあえず列挙していきますかね</p>

<pre><code class="d  ">// 一行コメント
/*
   複数行コメント
 */
/+ 
   ネスト可能複数行コメント
 +/
</code></pre>

<p>一応3つあげときますね<br/>
それぞれ説明すると、<br/>
<code>//</code>は一行コメントでその記号からその行の末尾までがコメントアウトとなります<br/>
<code>/**/</code>は複数行コメントなので<code>/*</code>から<code>*/</code>の間に書いた内容がコメントアウトされます<br/>
<code>/++/</code>はネスト、つまり入れ子可能な複数行コメントです<br/>
どういうことかというと</p>

<pre><code class="d">// /**/だとこれはダメ
/*
  /* hogehoge */
*/
// /++/だとOk
/+
  /* hogehoge */
+/
</code></pre>

<p>というわけです<br/>
つまり、<code>/**/</code>でコメントアウトされている箇所がある場合は<code>/++/</code>でくくるといいですね<br/>
ちなみに、<code>/++/</code>はC言語とか他の言語では使えないと思います<br/>
僕が知らないだけかもしれないですけど<code>/++/</code>がネスト可能なコメントがある言語はD言語しかしらないです</p>

<p>でまー！とりあえずこれでサンプルコードに関する説明は終わりました</p>

<p>せっかくなので<code>int</code>だけじゃなくて他の型も使ってみましょうか</p>

<pre><code class="d">import std.stdio;

void main(){
  int x      = 2;
  string str = "Hello world!";

  writeln("x   : ", x);
  writeln("str : ", str);
}
</code></pre>

<p>これで<br/>
  x   : 2<br/>
  str : Hello world!<br/>
と出力されると思います<br/>
あ、ちなみに writelnは賢いので、異なる型のリテラルを引数として加えてもそれを結合して出力します</p>

<p>あと、ワンポイントアドバイスとして<br/>
=による代入の場所を前後の行で揃えると見やすいと思います(個人的な感覚ですけど)<br/>
丁度数学でも同じ感ですよね</p>

<p>あああ！！！！！！！！！<br/>
重要なことを忘れていましたが<br/>
プログラムの可読性を保つためにもインデントをしましょう<br/>
インデントって何ってなるので説明すると<br/>
プログラムを見やすくするために文頭を空白やTAB文字でずらすことを言います<br/>
僕はいつも半角スペース2つを1単位としてインデントしています<br/>
インデントはブロック({}で囲まれる内容をブロックという)ごとにインデントしています<br/>
ちょっと試しに書いてみると(説明していない構文とかが含まれるので意味は考えなくて結構です、見やすさ的な観点を意識してください)<br/>
あと、適度なとこで空行を入れるといいかなあって思います！</p>

<p>せっかくなので、=の場所揃えとインデントを使ってみて綺麗にしたソースコードとそうでないものを比較しましょうか</p>

<p>可読性を意識していないコードの例</p>

<pre><code class="d">import std.stdio;

void main(){
int x;
string str;
x = 2;
str = "abc";
if(x == 2){
writeln(str);
}
}
</code></pre>

<p>れを先ほどの工夫を施すと次のようになります<br/>
可読性を意識したコードの例</p>

<pre><code class="d">import std.stdio;
void main(){
  int x;
  string str;

  x   = 2;
  str = "abc";

  if(x == 2){
    writeln(str);
  }
}
</code></pre>

<p>どうです？<br/>
後者の方が見やすいと思います</p>

<p>今回も長くなりましたね！<br/>
お疲れ様です！</p>

<p>次回予告です<br/>
次回はいよいよ条件分岐とループ構文とかに行こうかなあと、あと便利なデータ構造の一つの配列についても説明しようと思います！</p>

<p>では、以上です</p>

<p>alphaKAI</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初心者向けプログラミング講座 – 02 : 初めてのプログラミング 後編]]></title>
    <link href="http://alphaKAI.github.io/elements/2014/10/12/02-firstprogramming-second/"/>
    <updated>2014-10-12T17:53:55+09:00</updated>
    <id>http://alphaKAI.github.io/elements/2014/10/12/02-firstprogramming-second</id>
    <content type="html"><![CDATA[<p>はい、あるふぁかいさんによる初心者向けプログラミング講座02の後編です</p>

<p>過去記事
01はこちらです<br/>
<a href="http://alphakai.github.io/elements/2014/09/23/01-intro-aboutprogramming/">初心者向けプログラミング講座 – 01 : Introduction そもそもプログラミングとは</a><br/>
02(前編)はこちらです<br/>
<a href="http://alphakai.github.io/elements/2014/09/24/02-firstprogramming-first/">初心者向けプログラミング講座 – 02 : 初めてのプログラミング 前編</a></p>

<p>今回は前編のハローワールドの解説とプログラミング言語の選び方的なものも書きます！</p>

<p>では、続きからどうぞ！</p>

<!--more-->


<p>えーっと、では早速行きましょう！</p>

<h3>ハローワールドの解説</h3>

<p>とりあえず、もう一回貼っておきますか</p>

<pre><code class="d">import std.stdio;

void main(){
  writeln("Hello world!");
}
</code></pre>

<p>こんな短いコード(実質4行)にも重要なことがたくさんあります！</p>

<p>えーっと、まず1行目のimportの話し</p>

<p>えーっとこれは何をしてるかって言うと<br/>
stdっていうのがまずPhobosという標準ライブラリにことを指していて(etcとかもアリますが)<br/>
そこのstdio.dっていうのを読み込んでいるんですよ</p>

<p>あーっと<br/>
ここで標準ライブラリという言葉が出てきたので説明します<br/>
まず、ライブラリとは<br/>
簡単に言うと便利関数の便利セット的な認識で大丈夫です<br/>
で、標準ライブラリってのはそのソフトウェアに最初から付属するライブラリのことです</p>

<p>でさっきのstd.stdioに関しては<br/>
stdに含まれるstdioに文字列を読み込んでいる感じです<br/>
で、そのstdioにはコンソールに出力するための関数とかIOに関する関数が含まれているんですよ</p>

<p>はい、用語解説します<br/>
std     -> Standard<br/>
io        -> input/output<br/>
stdio -> Standard Input Output<br/>
とりあえず、略語はこんなかんじです<br/>
で、IO(略します)とはそのとおり 入出力のことを表します<br/>
で、ここでの入出力は標準入出力のことを言います<br/>
このへんの説明は一応しますが(主に出力について)詳しくは自分で調べてください</p>

<p>えーっと、標準出力ってのはシェル(ここでのシェルの意味については前編をご覧ください)<br/>
に文字を出力することを言います</p>

<p>で、丁度いまこのプログラムで<br/>
writelnって言うのを使ってるのですが(4行目)それはstd.stdioによって提供されています</p>

<p>試しに<code>import std.stdio;</code>の行を消してみるとエラーが吐かれると思います<br/>
はい</p>

<p>とまあこんな感じでimportの説明はOkです<br/>
std.stdioについては文字が出力したくなったらstd.stdioをimportしてwritelnするって覚えておいてください</p>

<p>あ！重要なことを忘れて今したが<br/>
D言語では式や文、宣言の終わりにセミコロン(;)をつけ無いといけません<br/>
式は y = 1 + 2;みたいなもの<br/>
文 writeln();みたいな関数の呼び出し<br/>
宣言 import ***;みたいな感じのもの</p>

<p>あと、変数/定数同士の計算(03でやる予定)とかも式です</p>

<p>次に、関数の呼び出しの話をしましょう</p>

<p>えーっとさっきから話に出てきているf(x)と全く同じです<br/>
何が同じって模式的に書くと<br/>
戻り値を格納する変数 = 関数名(引数);<br/>
なんですよ！<br/>
つまり<br/>
y = f(x)<br/>
f(x) = 2x<sup>2</sup> + 3x -4 という式が関数で<br/>
yがそれを格納する変数ってわけですね</p>

<p>でwritelnの話をするとwritelnは任意の数の引数をとり、その与えられた引数を末尾で改行して標準出力する関数です<br/>
だから&#8221;Hello world&#8221;という文字列リテラルが出力されたんですね！<br/>
リテラルの話は前編でしましたのでそちらを見てください</p>

<p>うーんとりあえず、これで多分ハローワールドの説明は終わりました</p>

<p>って言おうとしたけど重要なことをいい忘れていました<br/>
D言語の場合、main関数をvoid型で宣言した場合、自動的にreturn 0;で返り値0が返るような仕様になっています<br/>
ｱ、返り値の話ししたけど返り値の返し方を忘れていましたね<br/>
多分また後で関数を自作しようってところで触れますが一応書いておくと<br/>
return 変数 or 定数;<br/>
という感じで値をreturnします</p>

<p>こんな感じでハローワールドの説明を終わるので<br/>
何かわからないことがアリましたらコメント/Twitterでお願いします</p>

<h3>プログラミング言語の選び方(リクエストされたので)</h3>

<p>Twitterでリクエストされたので書きます</p>

<p>ぶっちゃけ、好きな言語を使えばいいのですが<br/>
まあ、それだとざっくりし過ぎなのでチョットしっかりすると<br/>
やりたい分野によって適している言語ってのは異なります<br/>
んー、分野っていうとあれですけど<br/>
例えば、PHPっていう言語があるんですけど、それは主に動的にHTML(これは調べてください)っていうのを生成するための言語でWeb向けなんですよね<br/>
だけど、それでゲーム開発をするのはすごく困難なんですよ<br/>
ほかにもJavaScriptという言語がアリますが、これもまたWeb系だしそれにブラウザの上で実行される言語なんですよね<br/>
ですので、高速な処理が必要とされる処理とかアプリとかを開発する際には少し難しいんですよ<br/>
僕もすべての言語を把握しているわけじゃないので(というかphpもJavaScriptも紹介したけど僕かけない)自分のやりたいことを調べてそれに適した言語とか<br/>
自分が好きになれるような言語を探してそれを使うのが良いと思います</p>

<p>僕的にはD言語とRubyをおすすめします<br/>
僕がDとRubyが好きな理由についてはまた今度書こうと思います</p>

<p>では、次回予告をします<br/>
次回は変数を用いたプログラミングをしていこうと思います<br/>
だんだん日本語が怪しくなってきたりわかりにくくなってきたかもしれないので<br/>
遠慮せずどんどんコメントかTwitterで指摘してください！<br/>
よろしくお願いします！！</p>

<p>では、以上です</p>

<p>alphaKAI</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初心者向けプログラミング講座 – 02 : 初めてのプログラミング 前編]]></title>
    <link href="http://alphaKAI.github.io/elements/2014/09/24/02-firstprogramming-first/"/>
    <updated>2014-09-24T00:20:18+09:00</updated>
    <id>http://alphaKAI.github.io/elements/2014/09/24/02-firstprogramming-first</id>
    <content type="html"><![CDATA[<p>どうも、あるふぁかいさんによるプログラミング講座02です<br/>
前回の記事<br/>
<a href="http://alphakai.github.io/elements/2014/09/23/01-intro-aboutprogrammin/">初心者向けプログラミング講座 – 01 : Introduction そもそもプログラミングとは</a><br/>
の続きです</p>

<p>今回は、D言語のコンパイラを導入してプログラミングに触れてみようって言う感じの内容です<br/>
あ、あとそれから<br/>
リクエスト的なのがあったと思うのでプログラミング言語の選び方的なものも併せて書いていこうかなあなんて思っています<br/>
あと、いまさらですが本講座ではWindows、もしくはLinux,OSX,Unix,BSDな*nix(総称させてください許してください)OSがインストールされているパソコンが必要です！<br/>
あと、書いててめっちゃ長くなってしまったので前編と後編って感じで2回にわけます<br/>
今回はその前編です</p>

<p>では、続きからどうぞ</p>

<!--more-->


<p>
さて、早速行きましょうか<br/>
ちょっと長いですけどがんばりましょう！！！</p>

<h3>さて！世界を作るための重機を仕入れよう！</h3>

<p>まず、D言語のコンパイラを導入しましょう<br/>
まあ、要するにこれから世界を作っていくわけなんですけど<br/>
そのための重機を仕入れようってかんじですね はい</p>

<p>D言語は静的型付けな言語ですのでコンパイラが必要なんですよね<br/>
あ、静的型付け/動的型付けについてはWikipediaなどで調べてください！</p>

<p>で、D言語のコンパイラの導入方法を細かくは説明しません<br/>
というのも、その説明は本質的なものではないので</p>

<p>とりあえず、簡単に説明します<br/>
こちらがD言語の公式サイトです<br/>
<a href="http://dlang.org">dlang.org</a><br/>
はい、こちらからDMD(D言語の公式コンパイラです これを僕は推奨します)をインストールするわけですが<br/>
Windowsの方はインストーラーを使うと楽です<br/>
で、LinuxとかOSXとかBSDとか*nixな方達は多分リポジトリにパッケージがあると思うのでバージョン管理システムを用いてインストールすると楽です！(ArchLinuxにはパッケージがあります)</p>

<p>とりあえず、インストールが終わったら<br/>
Windowsなのであればコマンドプロンプト<br/>
*nixな方はお使いのターミナルエミュレータを起動して<br/>
dmdと打ってみましょう<br/>
なんかぞろぞろ出てきたら成功です</p>

<p>あ！あと、エディタが必要ですね<br/>
Windowsな方はメモ帳だと辛いと思うのでなにかプログラミングに適したエディタを用意しましょう<br/>
僕のおすすめはNotepad++です<br/>
あ、Sublime Text 2ってのもありますけど<br/>
*nixな方はVimとかEmacsとかすきなものをお使いください<br/>
まあ、どんな環境であれ、D言語はかけるのでお好きな環境でどうぞ</p>

<p>これで世界を作るための重機、コンパイラの導入が出来ました<br/>
あ、わからないこととかがあったらコメントとかTwitterで言ってくれれば説明します(答えられる範囲で)</p>

<h3>初めてのプログラミング</h3>

<p>えーっと、とりあえず前回も言いましたが<br/>
PCは0,1しかわからないけど人間には0,1は辛いのでプログラミング言語を使うことになります<br/>
で、ここではD言語を使います</p>

<p>とりあえず!<br/>
何もしないプログラムってのをやってみましょうか<br/>
下の色が変わってる部分がプログラムの部分です！<br/>
<code>d
void main(){}
</code></p>

<p>これをさっき用意したエディタでmyFirstProgram.dというファイル名で保存しましょう(わかれば他の名前でも良い ただし拡張子として.dをつけること)<br/>
そして、コマンドプロンプトなりターミナルエミュレータを起動(いちいち2つとも書くと面倒なのでここではシェルと呼ばせてくださいおねがいします・・・)して<br/>
そのファイルを保存したディレクトリまで移動してから<br/>
 dmd myFirstProgram.d<br/>
と入力し、エンターを押しましょう<br/>
これでコンパイルが行われます</p>

<p>そうすると<br/>
コンパイルが始まってしばらくすると終わってシェルが入力待ちの状態になると思います<br/>
あ、エラーがあるとエラーメッセージが出るのですが、今回のプログラムはエラーが出ないはずですので(多分)何もなく終了すると思います</p>

<p>次に<br/>
Windowsな方は<br/>
myFirstProgram.exe<br/>
*nixな方は<br/>
./dmd myFirstProgram<br/>
と入力しましょう<br/>
そうすると実行されます！<br/>
まあ、そうすると何もなかったようにシェルが元の状態に戻ります<br/>
まあ、当然ですよね何もしないプログラムなんですから(笑)</p>

<p>これが一番最初のあなたのプログラムです！と言われてもピンと来ないと思うので次はもうちょっとだけ書き進めてみましょうか</p>

<p>とりあえず、ハローワールドと言う プログラミング言語に対する挨拶的なものがあるのですが<br/>
それをやってみることにしましょう<br/>
このコードに関する解説はちょっとしたらします<br/>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='d'><span class='line'><span class="k">import</span> <span class="n">std</span><span class="p">.</span><span class="n">stdio</span><span class="p">;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="kt">void</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">writeln</span><span class="p">(&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Hello</span> <span class="n">world</span><span class="p">!&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
これをさっき用意したエディタでhelloworld.dというファイル名で保存し先ほどと同様にコンパイルして実行してみましょう！<br/>
Windowsな方は<br/>
helloworld.exe<br/>
*nixな方は<br/>
./helloworld<br/>
です！<br/>
そうすると画面に<br/>
Hello world!と出力されると思います！<br/>
やったぜ！</p>

<p>これがハローワールドです！<br/>
プログラミングの世界にこんにちは的な感じです</p>

<p>ここであるふぁかいさんのワンポイントアドバイス！<br/>
こんな感じでソースコードが貼ってあって一回写したりコピペしたりしたら<br/>
そのプログラムを色々といじってみましょう</p>

<p>あ、ソースコードという単語について説明しますね<br/>
コードっていうのは規則とか規定という意味なんですよ<br/>
で、プログラムはそのプログラミング言語の規則にしたがって記述するわけじゃないですか<br/>
だから、コード = プログラムと言えるわけですよ<br/>
それから、ソースというのは源とかそういう意味じゃないですか<br/>
その源ってのは最終的に0,1となるプログラムの実態からしたら人間が書いたコードは変換する元となるわけじゃないですか<br/>
だからソースコードというと、実際にその言語で書かれたコードを指すんです！<br/>
なんかわかりにくくなってしましましたね・・・<br/>
まあこんな感じで・・・<br/>
うまく説明出来た気がしないのでわからなかったら調べてください・・・・</p>

<p>例えばwritelnの行を増やしたり&#8221;&ldquo;の中身を変えたりしてみましょう<br/>
これが後々役にやってきたりすると思います(個人的にはこれがプログラミングおもしれえ！につながると思っています)</p>

<h3>それじゃあ解説と行きましょうか</h3>

<p>まず、最初の何もしないプログラムについて</p>

<p>一個一個の意味を書いていくと<br/>
とりあえず、<br/>
<code>d
void main(){}
</code>
とあるのですがこれは何をしているかというと<br/>
void型のmainという関数を宣言というか定義しているんですよね<br/>
で、まあ、voidってなにmainってなにつか関数って何ってなるので一個一個説明します<br/>
まず、void型のmainという関数について<br/>
最初に書いたvoid型ってのなんですけど<br/>
まずは型というものの説明をします</p>

<p>前回も言いましたけどプログラムは0,1の羅列でありそれはプログラミング言語を変換したものです<br/>
で、型っていうのはある値がどんなものかを表すためのものです<br/>
例えばその値が整数なのか小数なのかはたまた文字なきゅうけいがのかを識別するものです<br/>
つまり、その&#8221;値&#8221;がどんなものなのかがコンパイラ側からわかるとちゃんとした0,1の羅列に変換できるんですよ<br/>
だってあれじゃないですか、自分は小数だと思ってもコンパイラが整数だと解釈したら色々と問題あるじゃないですか？だから自分で型を指定してやる必要があるんですよ(基本的には)<br/>
で、その&#8221;値&#8221;について説明しようと思います<br/>
さっきから&#8221;値&#8221;って言っていますが<br/>
それは変数の値という意味です<br/>
はい！ここでまた出てきました<br/>
進出単語！！！<br/>
&ldquo;変数&rdquo;<br/>
まあ、これは多分わかると思うんですけど<br/>
数学で<br/>
f(x) = 2x<sup>2</sup> + 3x - 4<br/>
みたいな二次関数があったとしたらそのxのことです(二次関数とか数学における関数については自分で勉強してください ちなみに一次関数でも何でもいいんですけどね(笑))<br/>
ほら、x = 1, x = 2みたいな感じで代入するのってプログラミングと同じようなことをしているんですよ<br/>
つまり、プログラミングと数学は似てると思ってもらっても問題ないと思います</p>

<p>つまり、型っていうのはある変数があったときその変数がどんなものなのかを表すものです</p>

<p>で、ここで振り返るとさっき<br/>
戻り値の説明をしていました<br/>
戻り値ってのは関数の結果です<br/>
つまり<br/>
f(x) = 2x<sup>2</sup> + 3x - 4<br/>
と合った時にx = 1だとf(1) = 1じゃないですか<br/>
この1が戻り値になるわけです<br/>
で、1は整数なので整数型と言えるわけです</p>

<p>ここで型の種類と意味をかいつまんで説明しましょう(ほとんど)<br/>
int 整数型<br/>
void 何もないことを表す型 おもに戻り値でつかう(というか値を持てないので戻り値にしか使えない)<br/>
string 文字列型<br/>
char 文字型<br/>
double 小数型(floatも小数ですがdoubleのほうがいいと思います このへんはご自分で調べてください)<br/>
みたいな感じです</p>

<p>あ〜文字と文字列の説明が抜けてましたので説明します<br/>
文字はその名の通り1文字です<br/>
つまり &lsquo;A&rsquo;, &lsquo;B&#8217;とかで、いっぽう文字列は&#8221;ABC&#8221;みたいな感じの複数の文字の組み合わさったものです<br/>
ここで&#8221;を文字列に、&#8217;を文字に使わったわけですが何を意味しているかというと<br/>
それが文字リテラルなのか整数リテラルなのかを表しています<br/>
あー、リテラルの説明をします<br/>
超ざっくり言うと 定数のことです 定数ってのはつまり　1とか2とか&#8221;ABC&#8221;とか&#8217;A&#8217;とかのことです<br/>
値が整数型なら整数リテラルとか言ったりします はい</p>

<p>void型を除いてそれぞれの型は値を持つことができます<br/>
そして、それを利用することが出来るんですよね(利用シーンとかは後でやります)</p>

<p>ここまでで<br/>
変数, 型, 戻り値, の定義的なものを書きました<br/>
多分わかりにくいところがあると思うのでそのへん、コメントかTwitterで教えてください追記します</p>

<p>で、次にmain関数と関数について説明します<br/>
まずは関数から<br/>
さっきも説明しましたけど<br/>
基本的には数学の関数と同じで値を渡す(f(x)ならx = 任意の数として呼び出すこと(呼び出しについては後述))と処理(数学だと計算)をして結果を出すものです<br/>
->何が違うか<br/>
単純な数式じゃなくて処理を織り交ぜることが出来るんですよね<br/>
つまり、関数はざっくり言うと処理のブロックと言えるんですよ<br/>
幾つかの処理をすることで得られる結果を得るためのブロックてな感じです</p>

<p>とりあえず、関数の宣言を模式的に記述すると<br/>
返り値の型 変数の名前(引数の型 引数の名前){<br/>
  ここに処理を書く<br/>
}<br/>
みたいな感じです</p>

<p>で、引数とはf(x)のxの部分のことです<br/>
引数は必ずしも必要ってわけじゃないので引数がいらない時は空の括弧でいいんです<br/>
で、複数必要なときは引数のところにカンマ区切りで 引数の型と引数の名前を書いていきます</p>

<p>はぁ、疲れましたね<br/>
このへんで一旦休憩しましょう<br/>
まあ、休憩なんていらないぜ！って方はこのまま突っ走りましょう！</p>

<p>やっとmain関数の話ができます</p>

<p>main関数って何よって話しなんですけど<br/>
かっこ良く言うと<br/>
始まりの関数 意味がわかるように言うと<br/>
処理の開始地点です<br/>
プログラムが実行されると一番最初にmain関数が呼ばれます<br/>
ん〜っと、難しいですね<br/>
main関数 -> 他の関数読んだりして処理する<br/>
みたいな感じなんですよ<br/>
まあ、多分よくわからないと思いますがとりあえず、プログラムはmain関数から始まるんだ！って思っておいてください(一部例外はありますが)</p>

<p>ここまででやっとmain関数の説明が出来ました！<br/>
それから最初の何もしないプログラムの説明が出来ました！<br/>
やったぜ!!<br/>
ただ、あまりにも長くなってしまったので<br/>
ハローワールドの話は後編ですることにします！</p>

<p>とりあえず、この記事を公開してからすぐに後編を書くのでよろしくお願いします！</p>

<p>では、以上です</p>

<p>alphaKAI</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初心者向けプログラミング講座 – 01 : Introduction そもそもプログラミングとは]]></title>
    <link href="http://alphaKAI.github.io/elements/2014/09/23/01-intro-aboutprogramming/"/>
    <updated>2014-09-23T23:51:05+09:00</updated>
    <id>http://alphaKAI.github.io/elements/2014/09/23/01-intro-aboutprogramming</id>
    <content type="html"><![CDATA[<p>えーっと、とりあえずなんとなく<br/>
プログラミングを独学しようとする初心者の方に少しでも貢献できればなあ<br/>
なんて思って、僕なりにプログラミング講座的なものをしてみようと思ってはじめてみました<br/>
今回は、まずプログラミングとはなにか ということをかこうかなあと<br/>
まあ、プログラミングに興味を持ってる方が対象なので書く必要があんまりない(?)かもしれないですけど<br/>
とりあえずここから</p>

<p>次回へのリンクを貼っておきます<br/>
次回への目次<br/>
02(前編)はこちらです<br/>
<a href="http://alphakai.github.io/elements/2014/09/24/02-firstprogramming-first/">初心者向けプログラミング講座 – 02 : 初めてのプログラミング 前編</a><br/>
02(後編)はこちらです<br/>
<a href="http://alphakai.github.io/elements/2014/10/12/02-firstprogramming-second/">初心者向けプログラミング講座 – 02 : 初めてのプログラミング 後編</a></p>

<p>では、続きからどうぞ</p>

<!--more-->


<p>えーっと、本講座における注意点</p>

<ul>
<li>この講座では基本的にD言語(たまにRubyも使うかも)で解説します</li>
<li>しかし、この講座では主にプログラミングの概念的な汎用的な考えを書いていく予定です</li>
<li>したがって、言語機能を深くまで掘り下げたりとかはしませんのでDやRubyの知識が無い方でも大丈夫です</li>
<li>必要なのはやる気だけです！！！</li>
<li>あ、ちなみに、これは僕なりの考え方なので他の人からすると考え方が異なるかもしれません</li>
</ul>


<p>以上の点が注意点的な感じです<br/>
はい</p>

<p>では、早速はじめましょう</p>

<h3>そもそもプログラミングとはなにか</h3>

<p>簡単に言えば<br/>
自分で世界を作ること<br/>
みたいな感じなんですよ<br/>
スケールが大きい話ですけど</p>

<p>で、つまりは<br/>
コンピュータを使って自分のやりたいことを実現するための手段です<br/>
あー、実現するための手段という点を見ると<br/>
「そんなん、既にあるソフト使えばええやん」<br/>
まあ、実際そうなんですけど<br/>
ただ、それだと<br/>
痒いところに手が届かなかったり<br/>
難解な説明書を読みながら頑張って作業したりとか<br/>
最悪の場合、自分のやりたいことができなかったりします</p>

<p>でも、自分で作っちゃえば解決します！</p>

<p>無いなら作ればいい<br/>
あるけど、使いにくいから自分で作っちゃおう</p>

<p>これがプログラミングにおいて基本的な考え方だと思います</p>

<p>つまりは、自分で物を作るんです</p>

<p>自分がやりたいことを自分の力で実現出来る<br/>
なんて素晴らしいことでしょう<br/>
それに、その自分が作ったもので他の人が同じようなことが出来るようになるかもしれません<br/>
なんて素晴らしいことでしょう！！！</p>

<p>話がごちゃごちゃしてきたのでまとめると</p>

<p>プログラミングとは<br/>
自分がやりたいことをコンピュータを使って実現するための手段<br/>
です</p>

<h3>じゃあまず何をすればいいか</h3>

<p>簡単です<br/>
実際に手を動かしましょう<br/>
これが(多分)技術力がつくコツ的なものだと思います<br/>
というか、実際に経験を積まないと多分ダメです はい</p>

<p>じゃあまずどうすんのってことなので説明します</p>

<p>多分いろんな入門書に書いてあると思いますが</p>

<p>PCそのもの(CPU)は言葉っていうものを理解できません<br/>
さらには、数字さえ理解できません<br/>
じゃあどうなってるのか</p>

<p>はい、CPUは電気信号のON/OFFしかわかんないんですよ<br/>
+,-の組み合わせにしたがって処理する感じなんですよ</p>

<p>で、+,-を2進数(0と1だけ)で表したものがプログラムの実態なんですよ</p>

<p>でも、常識的に考えて0,1の羅列を人間が書くのは絶望的です<br/>
例えば100桁書くぐらいなら何とかなるかもしれないけど<br/>
それが1万桁とかそんな感じの膨大な数になったら不可能ですね<br/>
死んでしまします</p>

<p>だからどうするか<br/>
-&gt; プログラミング言語と言うものを使う</p>

<p>こういうわけなんですよ<br/>
で、こういう訳って言われても意味がわからないと思うので説明すると<br/>
プログラミング言語ってのは0,1の羅列は人間にはわかりにくすぎるので<br/>
人間がわかるように処理を記述するための言語って感じです<br/>
  つまり<br/>
010100010101010110101010(適当です)<br/>
  ってのと<br/>
1 + 1(さっきの0,1の羅列とは対応してませんが)<br/>
とでは、圧倒的に後者のほうがわかりやすいじゃないですか<br/>
そういうことなんですよ</p>

<p>でも！<br/>
ここで一つ問題が<br/>
人間は0,1の羅列が辛いけど
PCからしてみると0,1しかわからないっていう現象が発生するんですよ<br/>
だからどうするか<br/>
プログラミング言語で書かれたものを0,1の羅列に変換してやればいいんですよ<br/>
それもプログラムを使って</p>

<p>これが、コンパイラと言うものです(compiler)<br/>
  コンパイル(compile)がその変換することを指すのでコンパイラはコンパイルするソフトってことです</p>

<p>簡単な図にすると
1 + 1 -&gt; コンパイラ -&gt; 010100010101010110101010(適当です)<br/>
みたいな感じですね</p>

<p>ということなので<br/>
あんまり長くなるとアレなので<br/>
今回はここまで</p>

<p>次回はD言語のコンパイラを導入して実際にプログラミング言語に触れてみようと思います！<br/>
次回の予定は未定ですが多分この記事を書いてから数日以内には公開できるかなあと思います！(もしかしたらその日のうちに書くかも)</p>

<p>では、以上です</p>

<p>alphaKAI</p>
]]></content>
  </entry>
  
</feed>
